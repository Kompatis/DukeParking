CREATE TABLE ParkingTransaction
(
  PTT_UID_TYPE VARCHAR(256) NOT NULL,
  PER_UID_PERMISSION VARCHAR(256) NOT NULL,
  FAC_UID_FACILITY INTEGER NOT NULL,
  LAN_UID_ENTRY BOOLEAN NOT NULL,
  LAN_UID_EXIT  BOOLEAN NOT NULL,
  ENT_UID_ENTITY INTEGER NOT NULL,
  VEH_UID_VEHICLE VARCHAR(256) NOT NULL,
  FCR_UID_FORCED_CLOSED_REASON INTEGER NOT NULL,
  PAI_UID_ENTRY TIMESTAMP,
  PAI_UID_EXIT  TIMESTAMP,
  RTX_UID_REPLACEMENT_TRANS INTEGER NOT NULL,
  STF_UID_OPERATOR INTEGER NOT NULL,
  PNE_UID_EVENT VARCHAR(256) NOT NULL,
  PNT_UID_PARKING_RATE_TYPE  VARCHAR(256) NOT NULL,
  PTG_UID_PARKING_TRANS_GROUP INTEGER NOT NULL,
  PRIMARY KEY ( PER_UID_PERMISSION ,PAI_UID_ENTRY, PAI_UID_EXIT)
);


COPY ParkingTransaction(PTT_UID_TYPE , PER_UID_PERMISSION, FAC_UID_FACILITY, LAN_UID_ENTRY,
  LAN_UID_EXIT, ENT_UID_ENTITY, VEH_UID_VEHICLE, FCR_UID_FORCED_CLOSED_REASON, PAI_UID_ENTRY,
  PAI_UID_EXIT, RTX_UID_REPLACEMENT_TRANS, STF_UID_OPERATOR, PNE_UID_EVENT , 
  PNT_UID_PARKING_RATE_TYPE, PTG_UID_PARKING_TRANS_GROUP) 
FROM '/home/vagrant/shared/ParkingTransactions.csv' DELIMITER ',' CSV HEADER;


SELECT PTT_UID_TYPE as parkingtype, PER_UID_PERMISSION as permitnumber, 
FAC_UID_FACILITY as parkinglot, PAI_UID_ENTRY as entrytime, PAI_UID_EXIT as exittime, 
FCR_UID_FORCED_CLOSED_REASON as closedreason
FROM ParkingTransaction;

CREATE FUNCTION loop_through_hours() RETURNS SETOF INTEGER AS $hour$
BEGIN 
  FOR i IN 1..2 LOOP
    RETURN NEXT i;
  END LOOP;
  RETURN;
END
$hour$ LANGUAGE plpgsql;

SELECT parkinglot, count(DISTINCT permitnumber) as numberofcars
FROM (
  SELECT PTT_UID_TYPE as parkingtype, PER_UID_PERMISSION as permitnumber, 
  FAC_UID_FACILITY as parkinglot, PAI_UID_ENTRY as entrytime, PAI_UID_EXIT as exittime, 
  FCR_UID_FORCED_CLOSED_REASON as closedreason
  FROM ParkingTransaction) AS Refined, loop_through_hours() AS hour
WHERE entrytime <  to_timestamp(concat('2016-10-31 0', hour, ':00:00'), 'YYYY-MM-DD HH24:MI:SS')   
 AND exittime > to_timestamp(concat('2016-10-31 0', hour, ':00:00'), 'YYYY-MM-DD HH24:MI:SS') 
-- WHERE entrytime < '2016-10-31 01:00:00'
--  AND exittime > '2016-10-31 01:00:00'
-- WHERE to_char(entrytime, 'YYYY-MM-DD HH24:MI:SS') < concat('2016-10-31', hour, ':00:00')
--  AND to_char(exittime, 'YYYY-MM-DD HH24:MI:SS') > concat('2016-10-31', hour, ':00:00')

GROUP BY parkinglot;


-- WHERE entrytime < '2016-10-31 0'||hour||':00:00'
--  AND exittime > '2016-10-31 0'||hour||':00:00'

CREATE FUNCTION Lot_in_out() RETURNS TRIGGER AS $Lot_in_out$
BEGIN
  IF NEW.PER_UID_PERMISSION IN (SELECT PER_UID_PERMISSION FROM ParkingTransaction) THEN
    DELETE FROM ParkingTransaction WHERE PER_UID_PERMISSION = NEW.PER_UID_PERMISSION;
  END IF;
  RETURN NEW;
END;
$Lot_in_out$ LANGUAGE plpgsql;

CREATE TRIGGER Lot_in_out
BEFORE INSERT ON ParkingTransaction
FOR EACH ROW
EXECUTE PROCEDURE Lot_in_out();


CREATE VIEW LotInfo(lotNumber, carsParked) AS
  SELECT FAC_UID_FACILITY, count(VEH_UID_VEHICLE)
  FROM ParkingTransaction
  GROUP BY FAC_UID_FACILITY;

